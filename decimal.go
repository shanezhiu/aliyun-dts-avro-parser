// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
package main

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Decimal struct {
	Value string `json:"value"`

	Precision int32 `json:"precision"`

	Scale int32 `json:"scale"`
}

const DecimalAvroCRC64Fingerprint = "\xf2\x13\xb4\xe6RX\x93\x0f"

func NewDecimal() Decimal {
	r := Decimal{}
	return r
}

func DeserializeDecimal(r io.Reader) (Decimal, error) {
	t := NewDecimal()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDecimalFromSchema(r io.Reader, schema string) (Decimal, error) {
	t := NewDecimal()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDecimal(r Decimal, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Precision, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Scale, w)
	if err != nil {
		return err
	}
	return err
}

func (r Decimal) Serialize(w io.Writer) error {
	return writeDecimal(r, w)
}

func (r Decimal) Schema() string {
	return "{\"fields\":[{\"name\":\"value\",\"type\":\"string\"},{\"name\":\"precision\",\"type\":\"int\"},{\"name\":\"scale\",\"type\":\"int\"}],\"name\":\"com.alibaba.dts.formats.avro.Decimal\",\"type\":\"record\"}"
}

func (r Decimal) SchemaName() string {
	return "com.alibaba.dts.formats.avro.Decimal"
}

func (_ Decimal) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Decimal) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Decimal) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Decimal) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Decimal) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Decimal) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Decimal) SetString(v string)   { panic("Unsupported operation") }
func (_ Decimal) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Decimal) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Value}

		return w

	case 1:
		w := types.Int{Target: &r.Precision}

		return w

	case 2:
		w := types.Int{Target: &r.Scale}

		return w

	}
	panic("Unknown field index")
}

func (r *Decimal) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Decimal) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Decimal) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Decimal) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Decimal) HintSize(int)                     { panic("Unsupported operation") }
func (_ Decimal) Finalize()                        {}

func (_ Decimal) AvroCRC64Fingerprint() []byte {
	return []byte(DecimalAvroCRC64Fingerprint)
}

func (r Decimal) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	output["precision"], err = json.Marshal(r.Precision)
	if err != nil {
		return nil, err
	}
	output["scale"], err = json.Marshal(r.Scale)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Decimal) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for value")
	}
	val = func() json.RawMessage {
		if v, ok := fields["precision"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Precision); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for precision")
	}
	val = func() json.RawMessage {
		if v, ok := fields["scale"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Scale); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for scale")
	}
	return nil
}
