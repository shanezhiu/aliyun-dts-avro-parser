// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
package main

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TextObject struct {
	Type string `json:"type"`

	Value string `json:"value"`
}

const TextObjectAvroCRC64Fingerprint = "\x84\xe7\f|\xb0m\xb5\xbe"

func NewTextObject() TextObject {
	r := TextObject{}
	return r
}

func DeserializeTextObject(r io.Reader) (TextObject, error) {
	t := NewTextObject()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTextObjectFromSchema(r io.Reader, schema string) (TextObject, error) {
	t := NewTextObject()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTextObject(r TextObject, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r TextObject) Serialize(w io.Writer) error {
	return writeTextObject(r, w)
}

func (r TextObject) Schema() string {
	return "{\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"com.alibaba.dts.formats.avro.TextObject\",\"type\":\"record\"}"
}

func (r TextObject) SchemaName() string {
	return "com.alibaba.dts.formats.avro.TextObject"
}

func (_ TextObject) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TextObject) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TextObject) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TextObject) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TextObject) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TextObject) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TextObject) SetString(v string)   { panic("Unsupported operation") }
func (_ TextObject) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TextObject) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Type}

		return w

	case 1:
		w := types.String{Target: &r.Value}

		return w

	}
	panic("Unknown field index")
}

func (r *TextObject) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TextObject) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TextObject) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TextObject) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TextObject) HintSize(int)                     { panic("Unsupported operation") }
func (_ TextObject) Finalize()                        {}

func (_ TextObject) AvroCRC64Fingerprint() []byte {
	return []byte(TextObjectAvroCRC64Fingerprint)
}

func (r TextObject) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TextObject) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for value")
	}
	return nil
}
